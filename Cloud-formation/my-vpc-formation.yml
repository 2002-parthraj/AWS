AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for a VPC with one public subnet and two private subnets across different Availability Zones, and corresponding route tables.

Parameters:
  VpcCidr:
    Type: String
    Default: '10.60.0.0/16'
    Description: The CIDR block for the VPC.

  PublicSubnetCidr:
    Type: String
    Default: '10.60.1.0/24'
    Description: The CIDR block for the public subnet in Availability Zone 1a.

  PrivateSubnet1bCidr:
    Type: String
    Default: '10.60.2.0/24'
    Description: The CIDR block for the private subnet in Availability Zone 1b.

  PrivateSubnet1cCidr:
    Type: String
    Default: '10.60.3.0/24'
    Description: The CIDR block for the private subnet in Availability Zone 1c.

Resources:
  # VPC creation
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MY-MUMBAI-TEST-VPC

  # Internet Gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: MUMBAI-ITGW

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet in Availability Zone 1a
  PublicSubnet1a:
    Type: 'AWS::EC2::Subnet'
    Condition: CreatePublicSubnet1a
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PublicSubnet-1a

  # Private Subnet in Availability Zone 1b
  PrivateSubnet1b:
    Type: 'AWS::EC2::Subnet'
    Condition: CreatePrivateSubnet1b
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1bCidr
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PrivateSubnet-1b

  # Private Subnet in Availability Zone 1c
  PrivateSubnet1c:
    Type: 'AWS::EC2::Subnet'
    Condition: CreatePrivateSubnet1c
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1cCidr
      AvailabilityZone: !Select 
        - 2
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PrivateSubnet-1c

  # Public Route Table for Public Subnet
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-RouteTable

  # Private Route Table for Private Subnets
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private-RouteTable

  # Public Route for the Public Subnet to enable Internet access
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Route Table Association for Public Subnet
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: CreatePublicSubnet1a
    Properties:
      SubnetId: !Ref PublicSubnet1a
      RouteTableId: !Ref PublicRouteTable

  # Route Table Association for Private Subnet in 1b
  PrivateSubnet1bRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: CreatePrivateSubnet1b
    Properties:
      SubnetId: !Ref PrivateSubnet1b
      RouteTableId: !Ref PrivateRouteTable

  # Route Table Association for Private Subnet in 1c
  PrivateSubnet1cRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: CreatePrivateSubnet1c
    Properties:
      SubnetId: !Ref PrivateSubnet1c
      RouteTableId: !Ref PrivateRouteTable

Conditions:
  # Condition to check if the Public Subnet in 1a is created
  CreatePublicSubnet1a: !Not [ !Equals [ !Ref PublicSubnetCidr, '' ] ]
  
  # Condition to check if the Private Subnet in 1b is created
  CreatePrivateSubnet1b: !Not [ !Equals [ !Ref PrivateSubnet1bCidr, '' ] ]
  
  # Condition to check if the Private Subnet in 1c is created
  CreatePrivateSubnet1c: !Not [ !Equals [ !Ref PrivateSubnet1cCidr, '' ] ]

Outputs:
  VPCId:
    Description: The VPC ID.
    Value: !Ref VPC

  PublicSubnetId:
    Condition: CreatePublicSubnet1a
    Description: The ID of the public subnet.
    Value: !Ref PublicSubnet1a

  PrivateSubnet1bId:
    Condition: CreatePrivateSubnet1b
    Description: The ID of the private subnet in 1b.
    Value: !Ref PrivateSubnet1b

  PrivateSubnet1cId:
    Condition: CreatePrivateSubnet1c
    Description: The ID of the private subnet in 1c.
    Value: !Ref PrivateSubnet1c

  PublicRouteTableId:
    Description: The ID of the public route table.
    Value: !Ref PublicRouteTable

  PrivateRouteTableId:
    Description: The ID of the private route table.
    Value: !Ref PrivateRouteTable
